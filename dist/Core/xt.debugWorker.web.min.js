var XTDebugger = /** @class */ (function () {
    function XTDebugger() {
        this.socket = undefined;
        this.openTS = 0;
    }
    XTDebugger.prototype.connect = function (IP, port) {
        var _this = this;
        if (this.socket) {
            this.socket.close();
        }
        this.socket = new WebSocket('ws://' + IP + ":" + port + "/");
        this.socket.onopen = function () {
            _this.openTS = _this.openTS == 0 ? performance.now() : _this.openTS;
            if (_this.socket) {
                _this.socket.send("Hello, World!");
            }
        };
        this.socket.onmessage = (function (ev) {
            try {
                var obj = JSON.parse(ev.data);
                if (obj.action === "reload") {
                    _this.handleReload();
                }
                else if (obj.action === "clearBreakPoint") {
                    _this.handleClearBreakPoint(obj);
                }
                else if (obj.action === "clearBreakPoints") {
                    _this.handleClearBreakPoints(obj);
                }
                else if (obj.action === "setBreakPoint") {
                    _this.handleSetBreakPoint(obj);
                }
                // else if ([obj[@"action"] isEqualToString:@"eval"]) {
                //     [self handleEval:obj];
                // }
            }
            catch (error) { }
        });
        this.socket.onclose = function () {
            setTimeout(function () {
                _this.connect(IP, port);
            }, 1000);
        };
        this.socket.onerror = function () {
            setTimeout(function () {
                _this.connect(IP, port);
            }, 1000);
        };
    };
    XTDebugger.prototype.handleReload = function () {
        if (performance.now() - this.openTS < 2000) {
            return;
        }
        postMessage({ action: "reload" });
    };
    XTDebugger.prototype.handleClearBreakPoint = function (obj) {
        postMessage({ action: "clearBreakPoint", bpIdentifier: obj["path"] + ":" + obj["line"] });
    };
    XTDebugger.prototype.handleClearBreakPoints = function (obj) {
        postMessage({ action: "clearBreakPoints", path: obj["path"] });
    };
    XTDebugger.prototype.handleSetBreakPoint = function (obj) {
        postMessage({ action: "setBreakPoint", bpIdentifier: obj["path"] + ":" + obj["line"] });
    };
    XTDebugger.prototype.sendLog = function (value) {
        if (this.socket) {
            this.socket.send(JSON.stringify({
                type: "console.log",
                payload: btoa(value),
                bpIdentifier: "console"
            }));
        }
    };
    XTDebugger.sharedDebugger = new XTDebugger();
    return XTDebugger;
}());
onmessage = function (event) {
    if (event.data) {
        if (event.data["type"] === "connect") {
            XTDebugger.sharedDebugger.connect(event.data["IP"], event.data["port"]);
        }
        else if (event.data["type"] === "log") {
            XTDebugger.sharedDebugger.sendLog(event.data["payload"]);
        }
    }
};
